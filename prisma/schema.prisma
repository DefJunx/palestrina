generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model AuthUser {
  id           String        @id @unique
  auth_session AuthSession[]
  auth_key     AuthKey[]

  email   String   @unique
  Profile Profile?

  @@map("auth_user")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model Conversation {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants Profile[]

  messages               Message[]
  NewMessageNotification NewMessageNotification[]

  @@map("conversations")
}

model NewMessageNotification {
  id             String @id @default(uuid())
  conversationId String
  profileId      String

  user         Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([profileId])
  @@map("new_message_notifications")
}

model Message {
  id             String @id @default(uuid())
  conversationId String
  senderId       String

  text String @db.VarChar(250)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Conversation Conversation @relation(fields: [conversationId], references: [id])
  sender       Profile      @relation("messageSender", fields: [senderId], references: [id])

  @@index([conversationId])
  @@index([senderId])
  @@map("messages")
}

model Exercise {
  id String @id @default(uuid())

  name      String
  videoPath String?
  photoPath String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trainingProgram TrainingProgram[]

  @@map("exercises")
}

model TrainingProgram {
  id        String @id @default(uuid())
  athleteId String

  name         String
  instructions String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileId String

  Exercise Exercise[]

  @@map("training_programs")
}

model Profile {
  id         String @id @default(uuid())
  authUserId String @unique

  username     String?
  fullName     String?
  avatarPath   String?
  fitnessData  Json?
  fitnessNotes String?  @db.VarChar(600)
  role         UserRole @default(User)
  hasCompiled  Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user                   AuthUser                 @relation(fields: [authUserId], references: [id], onDelete: Cascade)
  conversations          Conversation[]
  sentMessages           Message[]                @relation("messageSender")
  newMessageNotification NewMessageNotification[]

  @@map("profiles")
}

enum UserRole {
  User
  Admin
}
